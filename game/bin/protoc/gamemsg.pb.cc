// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamemsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gamemsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace unknowngamemessage {

namespace {

const ::google::protobuf::Descriptor* Mvector2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mvector2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mheader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mheader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mheader_Emsgtype_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Meditparticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Meditparticle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gamemsg_2eproto() {
  protobuf_AddDesc_gamemsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gamemsg.proto");
  GOOGLE_CHECK(file != NULL);
  Mvector2d_descriptor_ = file->message_type(0);
  static const int Mvector2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mvector2d, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mvector2d, vy_),
  };
  Mvector2d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mvector2d_descriptor_,
      Mvector2d::default_instance_,
      Mvector2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mvector2d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mvector2d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mvector2d));
  Mheader_descriptor_ = file->message_type(1);
  static const int Mheader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mheader, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mheader, msgtype_),
  };
  Mheader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mheader_descriptor_,
      Mheader::default_instance_,
      Mheader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mheader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mheader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mheader));
  Mheader_Emsgtype_descriptor_ = Mheader_descriptor_->enum_type(0);
  Meditparticle_descriptor_ = file->message_type(2);
  static const int Meditparticle_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, randomemissioninterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, lifetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, rotationspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, fadetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, texname_),
  };
  Meditparticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Meditparticle_descriptor_,
      Meditparticle::default_instance_,
      Meditparticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Meditparticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Meditparticle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gamemsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mvector2d_descriptor_, &Mvector2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mheader_descriptor_, &Mheader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Meditparticle_descriptor_, &Meditparticle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gamemsg_2eproto() {
  delete Mvector2d::default_instance_;
  delete Mvector2d_reflection_;
  delete Mheader::default_instance_;
  delete Mheader_reflection_;
  delete Meditparticle::default_instance_;
  delete Meditparticle_reflection_;
}

void protobuf_AddDesc_gamemsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rgamemsg.proto\022\022unknowngamemessage\"#\n\tM"
    "vector2d\022\n\n\002vx\030\001 \002(\002\022\n\n\002vy\030\002 \002(\002\"\177\n\007Mhea"
    "der\022\013\n\003uid\030\001 \002(\005\0225\n\007msgtype\030\002 \002(\0162$.unkn"
    "owngamemessage.Mheader.Emsgtype\"0\n\010Emsgt"
    "ype\022\021\n\rEDIT_PARTICLE\020\000\022\021\n\rEDIT_TILEDMAP\020"
    "\001\"\343\003\n\rMeditparticle\022+\n\006header\030\001 \002(\0132\033.un"
    "knowngamemessage.Mheader\022=\n\026randomemissi"
    "oninterval\030\002 \001(\0132\035.unknowngamemessage.Mv"
    "ector2d\022/\n\010lifetime\030\003 \001(\0132\035.unknowngamem"
    "essage.Mvector2d\0220\n\tdirection\030\004 \001(\0132\035.un"
    "knowngamemessage.Mvector2d\022,\n\005speed\030\005 \001("
    "\0132\035.unknowngamemessage.Mvector2d\022/\n\010rota"
    "tion\030\006 \001(\0132\035.unknowngamemessage.Mvector2"
    "d\0224\n\rrotationspeed\030\007 \001(\0132\035.unknowngameme"
    "ssage.Mvector2d\022/\n\010fadetime\030\010 \001(\0132\035.unkn"
    "owngamemessage.Mvector2d\022,\n\005scale\030\t \001(\0132"
    "\035.unknowngamemessage.Mvector2d\022\017\n\007texnam"
    "e\030\n \001(\t", 687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gamemsg.proto", &protobuf_RegisterTypes);
  Mvector2d::default_instance_ = new Mvector2d();
  Mheader::default_instance_ = new Mheader();
  Meditparticle::default_instance_ = new Meditparticle();
  Mvector2d::default_instance_->InitAsDefaultInstance();
  Mheader::default_instance_->InitAsDefaultInstance();
  Meditparticle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gamemsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gamemsg_2eproto {
  StaticDescriptorInitializer_gamemsg_2eproto() {
    protobuf_AddDesc_gamemsg_2eproto();
  }
} static_descriptor_initializer_gamemsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Mvector2d::kVxFieldNumber;
const int Mvector2d::kVyFieldNumber;
#endif  // !_MSC_VER

Mvector2d::Mvector2d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mvector2d::InitAsDefaultInstance() {
}

Mvector2d::Mvector2d(const Mvector2d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mvector2d::SharedCtor() {
  _cached_size_ = 0;
  vx_ = 0;
  vy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mvector2d::~Mvector2d() {
  SharedDtor();
}

void Mvector2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mvector2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mvector2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mvector2d_descriptor_;
}

const Mvector2d& Mvector2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemsg_2eproto();
  return *default_instance_;
}

Mvector2d* Mvector2d::default_instance_ = NULL;

Mvector2d* Mvector2d::New() const {
  return new Mvector2d;
}

void Mvector2d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vx_ = 0;
    vy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mvector2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float vx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_vy;
        break;
      }

      // required float vy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mvector2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float vx = 1;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->vx(), output);
  }

  // required float vy = 2;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->vy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mvector2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float vx = 1;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->vx(), target);
  }

  // required float vy = 2;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->vy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mvector2d::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float vx = 1;
    if (has_vx()) {
      total_size += 1 + 4;
    }

    // required float vy = 2;
    if (has_vy()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mvector2d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mvector2d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mvector2d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mvector2d::MergeFrom(const Mvector2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mvector2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mvector2d::CopyFrom(const Mvector2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mvector2d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mvector2d::Swap(Mvector2d* other) {
  if (other != this) {
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mvector2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mvector2d_descriptor_;
  metadata.reflection = Mvector2d_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Mheader_Emsgtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mheader_Emsgtype_descriptor_;
}
bool Mheader_Emsgtype_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Mheader_Emsgtype Mheader::EDIT_PARTICLE;
const Mheader_Emsgtype Mheader::EDIT_TILEDMAP;
const Mheader_Emsgtype Mheader::Emsgtype_MIN;
const Mheader_Emsgtype Mheader::Emsgtype_MAX;
const int Mheader::Emsgtype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Mheader::kUidFieldNumber;
const int Mheader::kMsgtypeFieldNumber;
#endif  // !_MSC_VER

Mheader::Mheader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mheader::InitAsDefaultInstance() {
}

Mheader::Mheader(const Mheader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mheader::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0;
  msgtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mheader::~Mheader() {
  SharedDtor();
}

void Mheader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mheader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mheader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mheader_descriptor_;
}

const Mheader& Mheader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemsg_2eproto();
  return *default_instance_;
}

Mheader* Mheader::default_instance_ = NULL;

Mheader* Mheader::New() const {
  return new Mheader;
}

void Mheader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0;
    msgtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mheader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgtype;
        break;
      }

      // required .unknowngamemessage.Mheader.Emsgtype msgtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::unknowngamemessage::Mheader_Emsgtype_IsValid(value)) {
            set_msgtype(static_cast< ::unknowngamemessage::Mheader_Emsgtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mheader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // required .unknowngamemessage.Mheader.Emsgtype msgtype = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mheader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // required .unknowngamemessage.Mheader.Emsgtype msgtype = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mheader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required .unknowngamemessage.Mheader.Emsgtype msgtype = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mheader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mheader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mheader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mheader::MergeFrom(const Mheader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mheader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mheader::CopyFrom(const Mheader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mheader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Mheader::Swap(Mheader* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mheader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mheader_descriptor_;
  metadata.reflection = Mheader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Meditparticle::kHeaderFieldNumber;
const int Meditparticle::kRandomemissionintervalFieldNumber;
const int Meditparticle::kLifetimeFieldNumber;
const int Meditparticle::kDirectionFieldNumber;
const int Meditparticle::kSpeedFieldNumber;
const int Meditparticle::kRotationFieldNumber;
const int Meditparticle::kRotationspeedFieldNumber;
const int Meditparticle::kFadetimeFieldNumber;
const int Meditparticle::kScaleFieldNumber;
const int Meditparticle::kTexnameFieldNumber;
#endif  // !_MSC_VER

Meditparticle::Meditparticle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Meditparticle::InitAsDefaultInstance() {
  header_ = const_cast< ::unknowngamemessage::Mheader*>(&::unknowngamemessage::Mheader::default_instance());
  randomemissioninterval_ = const_cast< ::unknowngamemessage::Mvector2d*>(&::unknowngamemessage::Mvector2d::default_instance());
  lifetime_ = const_cast< ::unknowngamemessage::Mvector2d*>(&::unknowngamemessage::Mvector2d::default_instance());
  direction_ = const_cast< ::unknowngamemessage::Mvector2d*>(&::unknowngamemessage::Mvector2d::default_instance());
  speed_ = const_cast< ::unknowngamemessage::Mvector2d*>(&::unknowngamemessage::Mvector2d::default_instance());
  rotation_ = const_cast< ::unknowngamemessage::Mvector2d*>(&::unknowngamemessage::Mvector2d::default_instance());
  rotationspeed_ = const_cast< ::unknowngamemessage::Mvector2d*>(&::unknowngamemessage::Mvector2d::default_instance());
  fadetime_ = const_cast< ::unknowngamemessage::Mvector2d*>(&::unknowngamemessage::Mvector2d::default_instance());
  scale_ = const_cast< ::unknowngamemessage::Mvector2d*>(&::unknowngamemessage::Mvector2d::default_instance());
}

Meditparticle::Meditparticle(const Meditparticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Meditparticle::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  randomemissioninterval_ = NULL;
  lifetime_ = NULL;
  direction_ = NULL;
  speed_ = NULL;
  rotation_ = NULL;
  rotationspeed_ = NULL;
  fadetime_ = NULL;
  scale_ = NULL;
  texname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Meditparticle::~Meditparticle() {
  SharedDtor();
}

void Meditparticle::SharedDtor() {
  if (texname_ != &::google::protobuf::internal::kEmptyString) {
    delete texname_;
  }
  if (this != default_instance_) {
    delete header_;
    delete randomemissioninterval_;
    delete lifetime_;
    delete direction_;
    delete speed_;
    delete rotation_;
    delete rotationspeed_;
    delete fadetime_;
    delete scale_;
  }
}

void Meditparticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Meditparticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Meditparticle_descriptor_;
}

const Meditparticle& Meditparticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemsg_2eproto();
  return *default_instance_;
}

Meditparticle* Meditparticle::default_instance_ = NULL;

Meditparticle* Meditparticle::New() const {
  return new Meditparticle;
}

void Meditparticle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::unknowngamemessage::Mheader::Clear();
    }
    if (has_randomemissioninterval()) {
      if (randomemissioninterval_ != NULL) randomemissioninterval_->::unknowngamemessage::Mvector2d::Clear();
    }
    if (has_lifetime()) {
      if (lifetime_ != NULL) lifetime_->::unknowngamemessage::Mvector2d::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::unknowngamemessage::Mvector2d::Clear();
    }
    if (has_speed()) {
      if (speed_ != NULL) speed_->::unknowngamemessage::Mvector2d::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::unknowngamemessage::Mvector2d::Clear();
    }
    if (has_rotationspeed()) {
      if (rotationspeed_ != NULL) rotationspeed_->::unknowngamemessage::Mvector2d::Clear();
    }
    if (has_fadetime()) {
      if (fadetime_ != NULL) fadetime_->::unknowngamemessage::Mvector2d::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_scale()) {
      if (scale_ != NULL) scale_->::unknowngamemessage::Mvector2d::Clear();
    }
    if (has_texname()) {
      if (texname_ != &::google::protobuf::internal::kEmptyString) {
        texname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Meditparticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .unknowngamemessage.Mheader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_randomemissioninterval;
        break;
      }

      // optional .unknowngamemessage.Mvector2d randomemissioninterval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_randomemissioninterval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_randomemissioninterval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lifetime;
        break;
      }

      // optional .unknowngamemessage.Mvector2d lifetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lifetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lifetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direction;
        break;
      }

      // optional .unknowngamemessage.Mvector2d direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_speed;
        break;
      }

      // optional .unknowngamemessage.Mvector2d speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rotation;
        break;
      }

      // optional .unknowngamemessage.Mvector2d rotation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rotationspeed;
        break;
      }

      // optional .unknowngamemessage.Mvector2d rotationspeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotationspeed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotationspeed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fadetime;
        break;
      }

      // optional .unknowngamemessage.Mvector2d fadetime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fadetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fadetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_scale;
        break;
      }

      // optional .unknowngamemessage.Mvector2d scale = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_texname;
        break;
      }

      // optional string texname = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->texname().data(), this->texname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Meditparticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .unknowngamemessage.Mheader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // optional .unknowngamemessage.Mvector2d randomemissioninterval = 2;
  if (has_randomemissioninterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->randomemissioninterval(), output);
  }

  // optional .unknowngamemessage.Mvector2d lifetime = 3;
  if (has_lifetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lifetime(), output);
  }

  // optional .unknowngamemessage.Mvector2d direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->direction(), output);
  }

  // optional .unknowngamemessage.Mvector2d speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->speed(), output);
  }

  // optional .unknowngamemessage.Mvector2d rotation = 6;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rotation(), output);
  }

  // optional .unknowngamemessage.Mvector2d rotationspeed = 7;
  if (has_rotationspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rotationspeed(), output);
  }

  // optional .unknowngamemessage.Mvector2d fadetime = 8;
  if (has_fadetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fadetime(), output);
  }

  // optional .unknowngamemessage.Mvector2d scale = 9;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->scale(), output);
  }

  // optional string texname = 10;
  if (has_texname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->texname().data(), this->texname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->texname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Meditparticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .unknowngamemessage.Mheader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // optional .unknowngamemessage.Mvector2d randomemissioninterval = 2;
  if (has_randomemissioninterval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->randomemissioninterval(), target);
  }

  // optional .unknowngamemessage.Mvector2d lifetime = 3;
  if (has_lifetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lifetime(), target);
  }

  // optional .unknowngamemessage.Mvector2d direction = 4;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->direction(), target);
  }

  // optional .unknowngamemessage.Mvector2d speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->speed(), target);
  }

  // optional .unknowngamemessage.Mvector2d rotation = 6;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rotation(), target);
  }

  // optional .unknowngamemessage.Mvector2d rotationspeed = 7;
  if (has_rotationspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rotationspeed(), target);
  }

  // optional .unknowngamemessage.Mvector2d fadetime = 8;
  if (has_fadetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fadetime(), target);
  }

  // optional .unknowngamemessage.Mvector2d scale = 9;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->scale(), target);
  }

  // optional string texname = 10;
  if (has_texname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->texname().data(), this->texname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->texname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Meditparticle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .unknowngamemessage.Mheader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // optional .unknowngamemessage.Mvector2d randomemissioninterval = 2;
    if (has_randomemissioninterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->randomemissioninterval());
    }

    // optional .unknowngamemessage.Mvector2d lifetime = 3;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lifetime());
    }

    // optional .unknowngamemessage.Mvector2d direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional .unknowngamemessage.Mvector2d speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed());
    }

    // optional .unknowngamemessage.Mvector2d rotation = 6;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // optional .unknowngamemessage.Mvector2d rotationspeed = 7;
    if (has_rotationspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotationspeed());
    }

    // optional .unknowngamemessage.Mvector2d fadetime = 8;
    if (has_fadetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fadetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .unknowngamemessage.Mvector2d scale = 9;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // optional string texname = 10;
    if (has_texname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Meditparticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Meditparticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Meditparticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Meditparticle::MergeFrom(const Meditparticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::unknowngamemessage::Mheader::MergeFrom(from.header());
    }
    if (from.has_randomemissioninterval()) {
      mutable_randomemissioninterval()->::unknowngamemessage::Mvector2d::MergeFrom(from.randomemissioninterval());
    }
    if (from.has_lifetime()) {
      mutable_lifetime()->::unknowngamemessage::Mvector2d::MergeFrom(from.lifetime());
    }
    if (from.has_direction()) {
      mutable_direction()->::unknowngamemessage::Mvector2d::MergeFrom(from.direction());
    }
    if (from.has_speed()) {
      mutable_speed()->::unknowngamemessage::Mvector2d::MergeFrom(from.speed());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::unknowngamemessage::Mvector2d::MergeFrom(from.rotation());
    }
    if (from.has_rotationspeed()) {
      mutable_rotationspeed()->::unknowngamemessage::Mvector2d::MergeFrom(from.rotationspeed());
    }
    if (from.has_fadetime()) {
      mutable_fadetime()->::unknowngamemessage::Mvector2d::MergeFrom(from.fadetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scale()) {
      mutable_scale()->::unknowngamemessage::Mvector2d::MergeFrom(from.scale());
    }
    if (from.has_texname()) {
      set_texname(from.texname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Meditparticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meditparticle::CopyFrom(const Meditparticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meditparticle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_randomemissioninterval()) {
    if (!this->randomemissioninterval().IsInitialized()) return false;
  }
  if (has_lifetime()) {
    if (!this->lifetime().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  if (has_speed()) {
    if (!this->speed().IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  if (has_rotationspeed()) {
    if (!this->rotationspeed().IsInitialized()) return false;
  }
  if (has_fadetime()) {
    if (!this->fadetime().IsInitialized()) return false;
  }
  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  return true;
}

void Meditparticle::Swap(Meditparticle* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(randomemissioninterval_, other->randomemissioninterval_);
    std::swap(lifetime_, other->lifetime_);
    std::swap(direction_, other->direction_);
    std::swap(speed_, other->speed_);
    std::swap(rotation_, other->rotation_);
    std::swap(rotationspeed_, other->rotationspeed_);
    std::swap(fadetime_, other->fadetime_);
    std::swap(scale_, other->scale_);
    std::swap(texname_, other->texname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Meditparticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Meditparticle_descriptor_;
  metadata.reflection = Meditparticle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace unknowngamemessage

// @@protoc_insertion_point(global_scope)
